// ==========================================================================
// Noise Handler
// Owned and contributed to by: brookcoli (Itch.io) - Aurorafume (GitHub), donkzilla03 (Itch.io) - AliAK03 (GitHub), JaydenFielderTorrens (Itch.io) - Squib35 (GitHub), komorebimoriko (Itch.io), TheRealCrizz (GitHub), LordVGahn (GitHub)
// itch.io listing: https://brookcoli.itch.io/meowt-of-tune - GitHub Repository: https://github.com/Aurorafume/PPR301
// ==========================================================================
//
// WHAT DOES THIS DO:
// This script manages the gameplay mechanic of "noise" generated by the player.
// It acts as a central hub for noise-related events, enemy spawning, and
// audio management in a Unity game.
//
// Core functionalities include:
// - Accumulating noise from various player actions (e.g. jumping).
// - Gradually decaying the accumulated noise over time.
// - Updating a visual UI element (NoiseBar) to reflect the current noise level.
// - Triggering an enemy spawn when the noise level reaches its maximum.
// - Managing an enemy spawn cooldown to control the game's pace.
// - Controlling the transition between ambient and chase audio tracks.
// - Providing static methods for global access to enemy state and audio controls.
//
// Dependencies:
// - NoiseBar and EnemySpawning custom scripts for UI and spawn point logic.
// - EnemyAI script for despawn notifications.
// - UnityEngine.AudioSource for sound playback.
//
// ==========================================================================

using System.Collections;
using UnityEngine;

public class NoiseHandler : MonoBehaviour
{
    [Header("Noise Settings")]
    [Tooltip("Amount of noise generated when the player jumps.")]
    public float jumpNoise;
    [Tooltip("Amount of noise generated from collisions (currently unused).")]
    public float collisionNoise;
    [Tooltip("The noise level required to max out the bar and trigger an enemy spawn.")]
    public float maxNoiseLevel = 100f;
    private float additionalNoise = 0f;

    [Header("Component & Object References")]
    [Tooltip("Reference to the NoiseBar script to update the visual feedback.")]
    public NoiseBar noiseBar;
    [Tooltip("The prefab for the enemy character to be spawned.")]
    public GameObject enemyManagerPrefab;
    [Tooltip("Reference to the EnemySpawning script which provides spawn locations.")]
    public EnemySpawning enemySpawning;

    [Header("Enemy Spawning Logic")]
    [Tooltip("Controls whether a new enemy can be spawned. Used for the cooldown.")]
    public bool canSpawnEnemy = true;
    [Tooltip("Static flag to track if an enemy is currently active in the scene.")]
    public static bool enemyExists = false;
    [Tooltip("The duration (in seconds) to wait before another enemy can be spawned.")]
    public float spawnCooldown = 10f;

    [Header("Audio Sources")]
    [Tooltip("AudioSource for the ambient background sound.")]
    public AudioSource ambientAudio;
    [Tooltip("AudioSource for the chase music, played when an enemy is active.")]
    public AudioSource chaseAudio;

    // Static references for global audio control
    public static AudioSource staticAmbientAudio;
    public static AudioSource staticChaseAudio;

    /// <summary>
    /// Initialises component references, static audio sources, and subscribes to the noise bar event.
    /// </summary>
    void Start()
    {
        // Initialise static references for global access
        staticAmbientAudio = ambientAudio;
        staticChaseAudio = chaseAudio;

        if (ambientAudio != null)
        {
            ambientAudio.volume = 0f;
            ambientAudio.Play();
        }

        // Subscribe to the event for when the noise bar fills up
        if (noiseBar != null)
        {
            noiseBar.OnNoiseMaxed -= TrySpawnEnemyManager;
            noiseBar.OnNoiseMaxed += TrySpawnEnemyManager;
        }
    }

    /// <summary>
    /// Handles the decay of noise over time, updates the noise bar UI, and adjusts audio volumes.
    /// </summary>
    void Update()
    {
        // Decay the generated noise over time
        additionalNoise = Mathf.Lerp(additionalNoise, 0, Time.deltaTime * 0.5f);
        if (additionalNoise < 0.01f)
        {
            additionalNoise = 0f;
        }

        // Update the noise bar with the current gameplay-generated noise
        if (noiseBar != null)
        {
            noiseBar.UpdateNoiseLevel(additionalNoise, maxNoiseLevel);
        }

        // Adjust ambient audio volume based on the noise percentage
        if (ambientAudio != null && noiseBar != null)
        {
            float targetVolume = Mathf.Clamp01(noiseBar.CurrentNoisePercentage);
            // Lower ambient volume significantly if an enemy is active
            if (enemyExists) targetVolume *= 0.2f;
            ambientAudio.volume = Mathf.MoveTowards(ambientAudio.volume, targetVolume, Time.deltaTime * 1.5f);
        }
    }

    /// <summary>
    /// Adds a specified amount of noise to the current total.
    /// </summary>
    /// <param name="extraNoise">The amount of noise to add.</param>
    public void GenerateNoise(float extraNoise)
    {
        additionalNoise += Mathf.Abs(extraNoise);
    }

    /// <summary>
    /// Subscribes to the OnNoiseMaxed event when the object is enabled.
    /// </summary>
    void OnEnable()
    {
        if (noiseBar != null)
        {
            noiseBar.OnNoiseMaxed -= TrySpawnEnemyManager;
            noiseBar.OnNoiseMaxed += TrySpawnEnemyManager;
        }
    }

    /// <summary>
    /// Unsubscribes from the OnNoiseMaxed event to prevent memory leaks.
    /// </summary>
    void OnDisable()
    {
        if (noiseBar != null)
        {
            noiseBar.OnNoiseMaxed -= TrySpawnEnemyManager;
        }
    }

    /// <summary>
    /// Called when the noise bar is maxed. Checks conditions and triggers enemy spawning.
    /// </summary>
    public void TrySpawnEnemyManager()
    {
        if (enemySpawning == null)
        {
            Debug.LogError("EnemySpawning reference is not set!");
            return;
        }
        
        // Ensure there is a valid platform to spawn on
        Transform currentPlatform = enemySpawning.GetCurrentEnemySpawnPoint();
        if (currentPlatform == null)
        {
            Debug.LogWarning("No platform found for enemy spawn.");
            return;
        }

        // Spawn enemy if allowed by cooldown and if one doesn't already exist
        if (canSpawnEnemy && !enemyExists)
        {
            SpawnEnemyManager();
            enemyExists = true;
            StartCoroutine(SpawnCooldown());

            if (chaseAudio != null && !chaseAudio.isPlaying) chaseAudio.Play();
        }
    }

    /// <summary>
    /// Instantiates the enemy manager prefab at a valid spawn point.
    /// </summary>
    public void SpawnEnemyManager()
    {
        if (enemyManagerPrefab != null && enemySpawning != null)
        {
            Transform spawnPoint = enemySpawning.GetCurrentEnemySpawnPoint();
            if (spawnPoint != null)
            {
                Instantiate(enemyManagerPrefab, spawnPoint.position, spawnPoint.rotation);
                Debug.Log("Enemy Manager Spawned at " + spawnPoint.position);
            }
            else
            {
                Debug.LogWarning("No matching platform/spawn point found.");
            }
        }
        else
        {
            Debug.LogError("Enemy Manager Prefab or EnemySpawning is not assigned!");
        }
    }

    /// <summary>
    /// Static method called by the enemy AI to signal it has been despawned. Cleans up and resets state.
    /// </summary>
    public static void NotifyEnemyDespawned()
    {
        enemyExists = false;
        
        // Find and destroy the enemy object instance
        EnemyAI enemyAI = FindObjectOfType<EnemyAI>();
        if (enemyAI != null)
        {
             Destroy(enemyAI.gameObject);
        }

        // Stop chase music and resume ambient audio
        if (staticChaseAudio != null)
            staticChaseAudio.Stop();

        if (staticAmbientAudio != null)
        {
            staticAmbientAudio.volume = 0f;
            staticAmbientAudio.Play();
        }
    }

    /// <summary>
    /// Coroutine to implement a cooldown period after an enemy spawns, preventing immediate re-spawns.
    /// </summary>
    IEnumerator SpawnCooldown()
    {
        canSpawnEnemy = false;
        yield return new WaitForSeconds(spawnCooldown);
        canSpawnEnemy = true;
    }

    /// <summary>
    /// Static method to reset static variables, useful for scene reloads or game restarts.
    /// </summary>
    public static void ResetStatics()
    {
        enemyExists = false;
        staticAmbientAudio = null;
        staticChaseAudio = null;
    }
}